generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id                   String               @id @default(cuid())
  name                 String               @default("Default Practice")
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  appointments         Appointment[]
  knowledgeTopics      KnowledgeTopic[]
  patients             Patient[]
  roleResponsibilities RoleResponsibility[]
  tasks                Task[]
  users                User[]
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  name           String?
  role           Role          @default(RECEPTIONIST)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  patients       Patient[]
  assignedTasks  Task[]
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model RoleResponsibility {
  id             String       @id @default(cuid())
  role           Role
  description    String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([role, organizationId])
  @@index([organizationId])
}

model Patient {
  id             String        @id @default(uuid())
  firstName      String
  lastName       String
  email          String?       @unique
  phoneNumber    String?
  dateOfBirth    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  organizationId String?
  appointments   Appointment[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
}

model Appointment {
  id             String            @id @default(uuid())
  date           DateTime
  reason         String
  patientType    PatientType       @default(EXISTING)
  status         AppointmentStatus @default(SCHEDULED)
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  patientId      String
  organizationId String?
  organization   Organization?     @relation(fields: [organizationId], references: [id])
  patient        Patient           @relation(fields: [patientId], references: [id])
  tasks          Task[]

  @@index([organizationId])
  @@index([patientId])
}

model Task {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  description    String
  status         TaskStatus   @default(PENDING)
  priority       TaskPriority @default(MEDIUM)
  dueDate        DateTime?
  assignedToId   String?
  assignedRole   Role?
  callId         String?
  appointmentId  String?
  organizationId String
  appointment    Appointment? @relation(fields: [appointmentId], references: [id])
  assignedTo     User?        @relation(fields: [assignedToId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([assignedToId])
  @@index([assignedRole])
  @@index([status])
  @@index([organizationId])
  @@index([callId])
  @@index([appointmentId])
}

model KnowledgeTopic {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  topicName       String
  content         String
  assistantId     String
  vapiToolId      String?       @unique
  vapiFileId      String?
  vapiKbName      String?
  vapiToolName    String?
  vapiFileName    String?
  vapiDescription String?
  organizationId  String?
  organization    Organization? @relation(fields: [organizationId], references: [id])

  @@index([assistantId])
  @@index([organizationId])
}

enum Role {
  ADMIN
  DENTIST
  RECEPTIONIST
  OFFICE_MANAGER
  BILLING_SPECIALIST
}

enum PatientType {
  NEW
  EXISTING
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
