// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patients  Patient[]
}

enum Role {
  USER
  ADMIN
  RECEPTIONIST
  DENTIST
}

// Patient model
model Patient {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String
  email        String?   @unique
  phoneNumber  String?
  dateOfBirth  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String    
  user         User      @relation(fields: [userId], references: [id])
  appointments Appointment[]
}

enum PatientType {
  NEW
  EXISTING
}

// Appointment model
model Appointment {
  id          String   @id @default(uuid())
  date        DateTime
  reason      String
  patientType PatientType @default(EXISTING)
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
}

// KnowledgeTopic model
model KnowledgeTopic {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  topicName     String   // User-facing name (e.g., "Office Hours")
  content       String   @db.Text // The actual knowledge content provided by the user
  assistantId   String   // ID of the Vapi Assistant this topic belongs to

  // Vapi resource IDs - store them once created
  vapiToolId    String?  @unique // The ID of the Vapi 'query' tool
  vapiFileId    String?           // The ID of the Vapi file containing the content
  vapiKbName    String?           // Generated internal KB name
  vapiToolName  String?           // Generated internal tool name
  vapiFileName  String?           // Generated internal file name
  vapiDescription String?       // Generated description used for tool/kb

  // Optional: Link to the user who created/owns this topic
  // userId        String
  // user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([assistantId])
  // @@index([userId])
}
